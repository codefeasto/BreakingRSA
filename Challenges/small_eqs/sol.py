from Crypto.Util.number import long_to_bytes
from sage.all import gcd, PolynomialRing, Zmod
from gmpy2 import next_prime
from random import randint
from tqdm import tqdm
from multiprocessing import Pool
import os

n = 18186672849609603331344182584568642941078893104802301217241028624469607021717197485036251613075846729705028441094100248337306406098776983108141004863456595015660485098203867670995838502297993710897784135087115777697925848407153788837657722171924264421550564295047937036911411846582733847201015164634546149603743246378710225407507435371659148999942913405493417037116587298256802831009824832360479040621348157491754407277404391337488226402711686156101028879269050800874367763551119682177453648890492731413760738825931684979379268401715029193518612541590846238434595210876468090976194627398214837801868969047036272502669215123
e = 65537
c = 1617999293557620724157535537778741335004656286655134597579706838690566178453141895621909480622070931381931296468696585541046188947144084107698620486576573164517733264644244665803523581927226503313545336021669824656871624111167113668644971950653103830443634752480477923970518891620296211614968804248580381104245404606917784407446279304488720323993268637887493503760075542578433642707326246816504761740168067216112150231996966168374619580811013034502620645288021335483574561758204631096791789272910596432850424873592013042090724982779979496197239647019869960002253384162472401724931485470355288814804233134786749608640103461


def process_prime(prime):
    t = a**(2*prime*n)
    for i, ele in enumerate(list(t)):
        res = gcd(int(ele), n)
        if res != 1 and res != n:
            print(res, "success", i, ele, prime)
            p2 = res
            assert n % p2 == 0
            p1 = (p2 + 1)//2//prime
            assert n % p1 == 0
            p3 = n//p1//p2
            phi = (p1 - 1)*(p2 - 1)*(p3 - 1)
            d = pow(e, -1, phi)
            flag = long_to_bytes(int(pow(c, d, n)))
            print(flag)
            return True
    return False

if __name__ == "__main__":
    
    Zn = Zmod(n)
    PR = PolynomialRing(Zn, 'x')
    x = PR.gen()

    primes20 = [next_prime(2**19)]
    while True:
        primes20.append(next_prime(primes20[-1]))
        if primes20[-1] > 2**20:
            primes20 = primes20[:-1]
            print(f"{len(primes20) = }")
            break

    while True:
        d1 = randint(0, n)
        d2 = randint(0, n)
        QR = PR.quotient_ring(x**2 + d1*x + d2)
        a = QR.random_element()
        with Pool(os.cpu_count() - 2) as pool:
            results = list(tqdm(pool.imap(process_prime, primes20), total=len(primes20)))
        if sum(results) != 0:
            break
    print('done')
